class Solution{
public:
	vector<int> find_MHT(int n, vector<pair<int,int>>& edges){
		if(n==1) return {0};
		unordered_map<int, unordered_set<int>> graph;
		for( auto &e:edges){
			graph[e.first].emplace(e.second);
			graph[e.second].emplace(e.first);
		}
		unordered_set<int> uncut;	
		queue<int> leaf_queue;
		for(int i=0;i<n;i++){
			if(graph[i].size()==1) leaf_queue.push(i);
			uncut.insert(i);
		}
	
		while(uncut.size()>2){
			int queue_size=leaf_queue.size();
		     for(int i=0;i<queue_size;i++){
			    int leaf=leaf_queue.front();
				int leaf_up=*graph[leaf].begin();
			    graph[leaf_up].erase(leaf);
			    if(graph[leaf_up].size()==1) leaf_queue.push(leaf_up);
			    leaf_queue.pop();
				uncut.erase(leaf);	
			 }	
			}	
	    vector<int>  result(uncut.begin(),uncut.end());
		return result;	
	}
};
